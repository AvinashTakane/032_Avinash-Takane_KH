CREATE DATABASE EXAM;
USE EXAM;
create table DEPT (DEPTNO int(2),
DNAME varchar(15),
LOC	varchar(10));

INSERT INTO DEPT VALUES(10,'ACCOUNTING','NEW YORK'),
(20,'RESEARCH','DALLAS'),
(30,'SALES','CHICAGO'),
(40,'OPERATIONS','BOSTON');
SELECT * FROM DEPT;

CREATE TABLE EMP (EMPNO	int(4),
ENAME varchar(10),
JOB	varchar(9),
HIREDATE date,
SAL	float(7,2),
COMM float(7,2),
DEPTNO int(2));

INSERT INTO EMP VALUES
(7839,'KING','MANAGER','1991-11-17',5000,NULL,10),
(7698,'BLAKE','CLERK','1981-05-01',2850,NULL,30),
(7782,'CLARK','MANAGER','1981-06-09',2450,NULL,10),
(7566,'JONES','CLERK','1981-04-02',2975,NULL,20),
(7654,'MARTIN','SALESMAN','1981-09-28',1250,1400,30),
(7499,'ALLEN','SALESMAN','1981-02-20',1600,300,30)
;
SELECT * FROM EMP;

-- 3.Display all the employees where SAL between 2500 and 5000 (inclusive of both).
SELECT * FROM EMP WHERE SAL BETWEEN 2500 AND 5000;

-- 4.Display all the ENAMEs in descending order of ENAME.
SELECT ENAME FROM EMP ORDER BY ENAME DESC;

-- 5.Display all the JOBs in lowercase.
SELECT DISTINCT LOWER(JOB) FROM EMP;

-- 6.Display the ENAMEs and the lengths of the ENAMEs.
SELECT ENAME,LENGTH(ENAME) FROM EMP;

-- 7.Display the DEPTNO and the count of employees who belong to that DEPTNO .
SELECT DEPTNO,COUNT(DEPTNO) FROM EMP GROUP BY DEPTNO ORDER BY 1;

-- 8.Display the DNAMEs and the ENAMEs who belong to that DNAME.
SELECT DNAME,ENAME FROM EMP,DEPT WHERE DEPT.DEPTNO=EMP.DEPTNO;

-- 9.Display the position at which the string ‘AR’ occurs in the ename.
SELECT POSITION('AR' IN ENAME) FROM EMP;

 -- 10.Display the HRA for each employee given that HRA is 20% of SAL.
SELECT SAL/100*20 AS HRA FROM EMP;

/*
1.Write a stored procedure by the name of PROC1 that accepts two varchar strings as parameters. 
Your procedure should then determine if the first varchar string exists inside the varchar string. 
For example, if string1 = ‘DAC’ and string2 = ‘CDAC, then string1 exists inside string2.
The stored procedure should insert the appropriate message into a suitable TEMPP output table.
Calling program for the stored procedure need not be written.*/

CREATE TABLE TEMP(RESULT VARCHAR(20));

DROP PROCEDURE PROC1;
DELIMITER #
CREATE PROCEDURE PROC1(firString VARCHAR(20),secString VARCHAR(20))
BEGIN
DECLARE instring INT DEFAULT 0;	
SET instring = INSTR(secString,firString);
CREATE TABLE TEMPP (
Message VARCHAR(50)); 
IF(instring = 0) THEN
INSERT INTO TEMPP
VALUES ('String 1 does not exists in String 2');
ELSE
INSERT INTO TEMPP
VALUES ('String 1 exists in String 2');
END IF;
SELECT * FROM TEMPP;
DROP TABLE TEMPP;
END#
call PROC1('DAC','CDAC')

/*2.Create a stored function by the name of FUNC1 to take three parameters, the sides of a triangle.
 The function should return a Boolean value:- TRUE if the triangle is valid, FALSE otherwise. 
 A triangle is valid if the length of each side is less than the sum of the lengths of the other two sides. 
 Check if the dimensions entered can form a valid triangle. Calling program for the stored function need not be written.*/
 DELIMITER //
CREATE OR REPLACE FUNCTION triangle(a number,b number,c number) RETURN boolean AS invalid_triangle exception;
BEGIN IF NOT (a+b>=c
               AND b+c>=a
               AND c+a>=b) THEN RAISE invalid_triangle;
ELSE RETURN TRUE;
END IF;
exception WHEN invalid_triangle THEN dbms_output.put_line('xxxxxx- invalid triangle -xxxxxxxxxx');
RETURN FALSE;
WHEN others THEN dbms_output.put_line('un identified error occured');
END;	
 
 DELIMITER ;
 
 
 
 
 














